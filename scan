#!/usr/bin/env python
import requests, re, json, base64, html, random, sys, time, copy, os, argparse
import jsbeautifier
import xml.etree.ElementTree as ET
import httpsuite


regex_str = r"""
  (?:"|')                               # Start newline delimiter
  (
    ((?:[a-zA-Z]{1,10}://|//)           # Match a scheme [a-Z]*1-10 or //
    [^"'/]{1,}\.                        # Match a domainname (any character + dot)
    [a-zA-Z]{2,}[^"']{0,})              # The domainextension and/or path
    |
    ((?:/|\.\./|\./)                    # Start with /,../,./
    [^"'><,;| *()(%%$^/\\\[\]]          # Next character can't be...
    [^"'><,;|()]{1,})                   # Rest of the characters can't be
    |
    ([a-zA-Z0-9_\-/]{1,}/               # Relative endpoint with /
    [a-zA-Z0-9_\-/]{1,}                 # Resource name
    \.(?:[a-zA-Z]{1,4}|action)          # Rest + extension (length 1-4 or action)
    (?:[\?|#][^"|']{0,}|))              # ? or # mark with parameters
    |
    ([a-zA-Z0-9_\-/]{1,}/               # REST API (no extension) with /
    [a-zA-Z0-9_\-/]{3,}                 # Proper REST endpoints usually have 3+ chars
    (?:[\?|#][^"|']{0,}|))              # ? or # mark with parameters
    |
    ([a-zA-Z0-9_\-]{1,}                 # filename
    \.(?:php|asp|aspx|jsp|json|
         action|html|js|txt|xml)        # . + extension
    (?:[\?|#][^"|']{0,}|))              # ? or # mark with parameters
  )
  (?:"|')                               # End newline delimiter
"""





def get_urls(content):
    #Find urls on the file
    
    regex = re.compile(regex_str, re.VERBOSE)
    for m in re.finditer(regex, content):
        
        if m.group(1) not in links["full_urls"] and m.group(1) is not None:
            links["full_urls"].append(m.group(1))
        if m.group(2) not in links["path_trv"] and m.group(2) is not None:
            links["path_trv"].append(m.group(2))
        if m.group(3) not in links["endpoint"] and m.group(3) is not None:
            links["endpoint"].append(m.group(3))
        if m.group(4) not in links["relative_with_ext"] and m.group(4) is not None:
            links["relative_with_ext"].append(m.group(4))


        



parser = argparse.ArgumentParser(prog="Burp raffic analyzer")
parser.add_argument("filename")

args = parser.parse_args()

tree = ET.parse(args.filename)
root = tree.getroot()


links ={
    "full_urls":[],
    "path_trv":[],
    "endpoint":[],
    "relative_with_ext":[]
    
}
if __name__ == '__main__':
   
    
    for conn in root:
        try:    
            url = conn[1].text
            host = conn[2].text
            port = conn[3].text
            protocol = conn[4].text
            method = conn[5].text
            path = conn[6].text
            extension = conn[7].text
            request = base64.b64decode(conn[8].text)
            status_code = conn[9].text
            length = conn[10].text
            response = base64.b64decode(conn[12].text)
            
            if extension in ["webp", "png", "jpg", "jpeg", "ico", "svg"]:
                continue    

            
            
            response = httpsuite.Response.parse(response)
            
            
            
            body = str(response.body)
            if "Content-Type" in response.headers:
                if response.headers["Content-Type"] == "text/javascript":
                    body = jsbeautifier.beautify(str(response.body))
            
            
            
            
            
            get_urls(body)
        except Exception as e:
            continue
            
       
    
    with open("links.json", "w") as file:
        json.dump(links, file, indent=3)
        
        
        
        
        
        
    
    


















